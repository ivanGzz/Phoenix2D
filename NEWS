[2.1]

  *  The player can now have memory about what it sees in the previous cycles.  If the player sets up
     the Configs::PLAYER_HISTORY option then, the players in the world model will remain in memory for 
     Configs::PLAYER_MAX_HISTORY cycles once they are no more in the visual range.

  *  New tests: world model test that test the world model generation using memory and tracking for
  	 each player.
  	 
  *  Now, the save sensors and commands options are loaded from the team config file following the format:
     "sensors": {
       "see": false,
       "fullstate": false,
       "hear": false,
       "body": false,
     }
     "commands": false
     And they are saved in log files with format name <TEAM_NAME>_<UNIFORM_NUMBER>_<SENSOR|commands>.log
     
  *  Now the user can use fuzzy logic using the fuzzy toolkit provided with Phoenix2D.
  
  *  Now the user can use genetic algorithms using the genetics algorithm toolkit provided with Phoenix2D

  *  Dribble test fixed

[2.0]

  *  Geometrical primitives were added and included into the base code.  This primitives are included in
     the new folder utils were general methods were also included as particle filters, potential fields,
     etc.  All the source code in the utils folder are headers which needs no compilation.

  *  All the positions are now returned as pointers for the Self, Player and Ball objects.  Also, a
     Position object receives a pointer for the methods getDirectionTo and getDistanceTo.

[1.1]

  *  The trainer has a new command: wait_for_msg <MESSAGE>, this is a blocking method which will wait 
     for a message with content <MESSAGE>.  Once the message is heard, the trainer will follow with the
     next command in the script.

  *  The configs files now use the json format.  The general configuration file (configs.json) now has
     the format:
     {"configs": {
 	    "commands": {
 		  "buffer": 4,       //buffer size for the commands
 		  "precision": 4     //precision for the commands (in decimal points)
 		},
 		"players": {
 		  "buffer": 8        //buffer size for the player history
 		},
 		"ball": {
 		  "buffer": 8        //buffer size for the ball history
 		},
 		"logging": {
 		  "logname": "test"  //the logname when logging is enabled
 		},
 		"self": {
 		  "params": {
 		    "buffer": 8      //buffer size for the sense body params
 		  },
      "localization": "lowpassfilter", //"particlefilter" and "triangulation" supported but not tested
 		  "offset": 20       //milliseconds the agent will wait for messages
 		}                    // from the server once the sense body is received and
	 }                       // before the new cycle begins
	 }
	 and the team configuration files (<TEAM_NAME>.json) the format:
	 {"team": {
 	    "1": {
 		  "x": -10.0,        // x position for player 1
    	  "y": 0.0,          // y position for player 2
 		  "logging": false,  // enables the logging ability
 		  "verbose": false   // enables the verbose mode (prints a lot of stuff!)
 		},
 		"2": {
 		  "x": -20.0,
 		  "y": 0.0,
 		  "logging": true,
 		  "verbose": false
 		}
	 }
	 }

  *  Changed the PlayMode to function pointers.  Now the artificial intelligence is provided by function 
     pointers with the type void(* execute)(Phoenix::WorldModel, std::vector<Phoenix::Message>, 
     Phoenix::Commands*), which are executed every cycle.  This functions are now registered in the 
     Controller object. Some tests are harcoded by default and you can run them using the run command.  
     For example:
     ./agent test localization Phoenix2D p localhost
     runs the localization test.  To run the custom AI you use the command run:
     ./agent run Phoenix2D p localhost
     Please refer to the test folder to see the examples.

  *  Now, Phoenix2D is divided in four parts: Phoenix2D-base, in charge of the low level task such as
     send and receive messages, parse information, manage sensors, etc, Phoenix2D-tests, in charge of the
     test for the player, and the main.cpp file in charge of launching the program.  Both Phoenix2D-base 
     and Phoenix2D-tests are compiled as static libraries, the first as stand-alone and the second as 
     dependent of Phoenix2D-base.  The fourth part is the AI part which is defined by the user, in a future
     it will be included the AI used in international contests.

  *  Added python script for trainer scripting.  The class is provided in the Controller.py file and a
     example of use is provided in he trainer.py file.  This is a basic scripting and only can use the
     methods changeTo(<PLAY_MODE>) and recover().

  *  Added PFilter class for a basic particle filter implementation.  For the moment this class is used
     and optimized for the localization task.